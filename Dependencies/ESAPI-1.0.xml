<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESAPI-1.0</name>
    </assembly>
    <members>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition">
            <summary>
            This interface describes the extensions to the acquisition interface by Exactive based instruments.
            </summary>
            <example>
            In the following example "acquisition"
            has to be assigned elsewhere.
            <code>
            IAcquisition acquisition;
            IExactiveAcquisition exactiveExtensions = acquisition as IExactiveAcquisition;
            if (value != null)
            {
            	Console.WriteLine("Exactive extensions available");
            }
            </code>
            </example>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)">
            <summary>
            Start an acquisition providing a workflow for this operation. The instrument must be on mode "On".
            There must not be any pending acquisition. The new acquisition will run under direct control.
            </summary>
            <param name="acquisition">workflow of the new acquisition.</param>
            <returns>The result of the change request as far as the task is processed in the current process</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition">
            <summary>
            Cancel any pending acquisition that is started under direct control.
            </summary>
            <returns>The result of the change request as far as the task is processed in the current process</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreatePermanentAcquisition">
            <summary>
            Create an object that will instruct the instrument on <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/> to start
            an acquisition. This kind of acquisition can be paused and resumed.
            <para>
            The current set of tune data will be used. It can be changed during operation.
            </para>
            <para>
            The instrument operation mode will switch to DirectControl.
            </para>
            <para>
            The acquisition can be stopped by calling <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition"/>.
            </para>
            </summary>
            <returns>The created acquisition workflow can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateAcquisitionLimitedByCount(System.Int32)">
            <summary>
            Create an object that will instruct the instrument on <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/> to start
            an acquisition. This kind of acquisition can be paused and resumed.
            <para>
            The current set of tune data will be used. It can be changed during operation.
            </para>
            <para>
            The instrument operation mode will switch to DirectControl.
            </para>
            <para>
            The acquisition can be stopped by calling <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition"/> and will implicitely terminated
            after the specified amount of scans have been taken.
            </para>
            </summary>
            <param name="count">The number of scans to be taken during this acquisition. The number must be positive and must not exceed 1000000.</param>
            <returns>The created acquisition workflow can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateAcquisitionLimitedByDuration(System.TimeSpan)">
            <summary>
            Create an object that will instruct the instrument on <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/> to start
            an acquisition. This kind of acquisition can be paused and resumed.
            <para>
            The current set of tune data will be used. It can be changed during operation.
            </para>
            <para>
            The instrument operation mode will switch to DirectControl.
            </para>
            <para>
            The acquisition can be stopped by calling <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition"/> and will implicitely terminated
            after the the specified time span has elapsed.
            </para>
            </summary>
            <param name="duration">The amount of time of the acquisition. The lower limit is 0.01 min and the maximum 15000 min.</param>
            <returns>The created acquisition workflow can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateMethodAcquisition(System.String)">
            <summary>
            Create an object that will instruct the instrument on <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/> to start
            a method-based acquisition. This kind of acquisition can be paused and resumed.
            <para>
            Tune data will be retrieved from those files present in the method.
            </para>
            <para>
            The instrument operation mode will switch to DirectControl.
            </para>
            <para>
            The acquisition can be stopped by calling <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition"/> and will implicitely terminated
            after the duration specified in the method has elapsed.
            </para>
            </summary>
            <param name="methodFileName">name of the method to execute.</param>
            <returns>The created acquisition workflow can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateMethodAcquisition(System.String,System.TimeSpan)">
            <summary>
            Create an object that will instruct the instrument on <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/> to start
            a method-based acquisition. This kind of acquisition can be paused and resumed.
            <para>
            Tune data will be retrieved from those files present in the method.
            </para>
            <para>
            The instrument operation mode will switch to DirectControl.
            </para>
            <para>
            The acquisition can be stopped by calling <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CancelAcquisition"/> and will implicitely terminated
            after the the specified time span has elapsed.
            </para>
            </summary>
            <param name="methodFileName">name of the method to execute.</param>
            <param name="duration">The amount of time of the acquisition. The lower limit is 0.01 min and the maximum 15000 min.</param>
            <returns>The created acquisition workflow can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateTrigger(System.String)">
            <summary>
            Create a new object that allows to wait for a trigger condition in the instrument.
            </summary>
            <param name="triggerName">name of the trigger returned by <see cref="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.TriggerNames"/></param>
            <returns>The trigger one can wait for</returns>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.TriggerNames">
            <summary>
            Get access to all trigger names that can be used in <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateTrigger(System.String)"/>.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.ITrigger">
            <summary>
            A trigger is a special readback value that usually initiates an operation.
            <para>
            An instance of this class will be created by <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.CreateTrigger(System.String)"/>.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionMethodRun">
            <summary>
            This special workflow selects a method to be executed. No further instruments like AS, LC or GC will be
            driven. The duration of the method can be enhanced or reduced.
            <para>
            The tune parameters taken of the method's tune file(s) will be used.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow">
            <summary>
            This workflow base class contains properties available in all acquisition workflows.
            Default values are "empty" for no rawfile acquisition, without sample name. etc.
            Continuation defaults to StayOn.
            </summary>
            <remarks>
            <para>
            Note that no other device will be instructed to take scans.
            </para>
            </remarks>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.RawFileName">
            <summary>
            Access to the raw file name to be used during an acquisition. Setting this value to null lets the instrument
            take acquisitions without storing in a separate file. 
            <para>
            An evaluation of this value will happen on submission to <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition.StartAcquisition(Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow)"/>.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.Continuation">
            <summary>
            This property defines what shappens when the acquisition stops.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.Trigger">
            <summary>
            Trigger to wait for before doing the operation.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.SampleName">
            <summary>
            This property defines the arbitrary sample name. 
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.Comment">
            <summary>
            This property defines an arbitrary comment. 
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionWorkflow.SingleProcessingDelay">
            <summary>
            The instrument will not execute any scan
            if this property is positive until the delay has expired
            or a new custom scan has been defined.
            <para>
            It will be quaranteed that after the event <see cref="E:Thermo.Interfaces.InstrumentAccess_V1.MsScanContainer.IMsScanContainer.AcquisitionStreamOpening"/>
            no <see cref="E:Thermo.Interfaces.InstrumentAccess_V1.MsScanContainer.IMsScanContainer.MsScanArrived"/> will be populated or written to the rawfile
            if this delay is pending and no custom scan has been placed.
            </para>
            <para>
            The unit of this property is seconds and possible values are
            between 0 and 600 inclusively. The default value is 0.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionMethodRun.MethodName">
            <summary>
            Access to the method name to be used during an acquisition.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionMethodRun.Duration">
            <summary>
            Access to the duration of the acquisition. Setting this to null choses the duration chosen in the method
            itself. The lower limit is 0.01 min and the maximum 15000 min.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.AcquisitionContinuation">
            <summary>
            Defines what shall happen when an acquisition request ended.
            </summary>
            <remarks>
            See <see cref="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.IExactiveAcquisition"/> for an example how this enumeration can be used.
            </remarks>
        </member>
        <member name="F:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.AcquisitionContinuation.StayOn">
            <summary>
            The instrument will continue to run, but no method execution is performed nor is
            data written to a raw file.
            </summary>
        </member>
        <member name="F:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.AcquisitionContinuation.Standby">
            <summary>
            The instrument enters the standby state.
            </summary>
        </member>
        <member name="F:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.AcquisitionContinuation.Off">
            <summary>
            The instrument enters the off state.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveInstrumentValues">
            <summary>
            This interface describes the extensions to IInstrumentValues by Exactive based instruments.
            </summary>
            <example>
            In the following example "access"
            has to be assigned elsewhere.
            <code>
            IInstrumentAccess access;
            IControl control = access.Control;
            IInstrumentValues values = control.InstrumentValues;
            IExactiveInstrumentValues exactiveValues = values as IExactiveInstrumentValues;
            if (exactiveValues == null)
            {
            	Console.WriteLine("Exactive extensions are not available");
            }
            </code>
            </example>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveInstrumentValues.Get(System.String)">
            <summary>
            Get access to an instrument value by its name.
            <para>
            Each name has also a numeric representation, see <see cref="M:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveInstrumentValues.Get(System.UInt64)"/>.
            </para>
            <para>
            This method is the instrument-specific implementation for Exactive-based instruments.
            </para>
            </summary>
            <param name="name">The name of the value</param>
            <returns>null is returned for an invalid or unknown name, otherwise the value linked with the passed name is returned.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveInstrumentValues.Get(System.UInt64)">
            <summary>
            Get access to an instrument value by its number.
            <para>
            This method is the instrument-specific implementation for Exactive-based instruments.
            </para>
            </summary>
            <param name="number">The number of the value</param>
            <returns>The value linked with the passed name is returned. Nodes unknown to the instrument may return in a dumb value instance.</returns>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.NamespaceDoc">
            <summary>
            This namespace contains classes needed to start an acquisition on Exactive based instruments.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Methods.NamespaceDoc">
            <summary>
            This namespace covers the single extension that Exactive-based instruments have in addition
            to standard instruments' methods.
            <para>
            You can simply cast an
            <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.Methods.ITableRow"/>
            to an
            <see cref="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Methods.IExactiveTableRow"/>
            on an Exactive based instrument.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile">
            <summary>
            This interface covers all control functionality for tune data in the instrument.
            </summary>
            <remarks>
            An instance of this class will be created by <see cref="P:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl.Tunefile"/>.
            </remarks>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Load(System.String)">
            <summary>
            Load a different tunefile and set the <see cref="P:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Name"/>.
            </summary>
            <param name="filename">name of the file where to take the settings from.</param>
            <returns>true if the request has been transmitted to the instrument, false otherwise</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Store(System.String)">
            <summary>
            Store the current settings in a file and set the <see cref="P:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Name"/>.
            </summary>
            <param name="filename">name of the file where to store the settings. null or the empty string stores current values.</param>
            <returns>true if the request has been transmitted to the instrument, false otherwise</returns>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Name">
            <summary>
            Get the name of the current tunefile.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Modified">
            <summary>
            Has the tunefile been changed since its last load/stave operation?
            </summary>
        </member>
        <member name="E:Thermo.Interfaces.ExactiveAccess_V1.Control.ITunefile.Changed">
            <summary>
            This event will be fired when then tunefile's name or modification status has changed.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue">
            <summary>
            This interface describes the extensions to an instrument value by Exactive based instruments.
            </summary>
            <example>
            In the following example "values"
            has to be assigned elsewhere.
            <code>
            IInstrumentValues values;
            IExactiveValue value = values.Get("InstrumentAcquisition") as IExactiveValue;
            if (value != null)
            {
            	Console.WriteLine(value.Commands.Length + " commands available");
            }
            </code>
            </example>
            <example>
            A full-file example can be found here: <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.InstrumentValues.IInstrumentValues"/>.
            </example>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue.Execute(System.String,System.String)">
            <summary>
            Execute a command on this value. The command will be verified using <see cref="P:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue.Commands"/>.
            </summary>
            <param name="command">The command to the value.</param>
            <param name="argument">null or the argument of the command.</param>
            <returns>true if the command has been sent to the instrument, false otherwise</returns>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue.Commands">
            <summary>
            Get access to a list of available commands. The list may change if the user role changes.
            Any executed command name will be tested against this list.
            <para>
            The commands will be null if the instrument is not connected or if the IValue is unknown
            to the instrument.
            </para>
            </summary>
        </member>
        <member name="E:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue.CommandsChanged">
            <summary>
            This event will be fired when the set of commands have changed. The calling thread
            should not be blocked by complex actions.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionLimitedByTime">
            <summary>
            This special workflow restricts an acquisition to a specific duration.
            <para>
            The current tune parameters of the instrument will be used.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionLimitedByTime.Duration">
            <summary>
            Access to the duration of the acquisition. The lower limit is 0.01 min and the maximum 15000 min.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.NamespaceDoc">
            <summary>
            This namespace contains the extension to start acquisitions directly on Exactive based instruments.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess">
            <summary>
            This interface describes the API extensions of Exactive based instruments.
            </summary>
            <example>
            A typical use can be performed by .NET's <c>using</c> statement as shown
            here. This ensures proper disposal after use. In the following example the container
            has to be assigned elsewhere.
            <code>
            InstrumentAccessContainer container;
            using (IInstrumentAccess instrument = container.Get(1))
            {
            	IExactiveInstrumentAccess exactive = instrument as IExactiveInstrumentAccess;
            	if (exactive != null)
            	{
            		// further code
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess.Control">
            <summary>
            Get access to the interface covering all control functionality of an instrument.
            <para>
            This property is the instrument-specific implementation for Exactive-based instruments.
            </para>
            <para>
            This property is accessible offline.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess.CurrentUserRole">
            <summary>
            Access to the current user role (license class) the system has.
            An invalid value will be ignored on set access.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess.UserRoles">
            <summary>
            Access to the list of possible user roles.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess.Licenses">
            <summary>
            Access to the list of possible access licenses.
            </summary>
        </member>
        <member name="E:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess.UserRolesChanged">
            <summary>
            This event will be fired when the current user role or the list
            of possible userroles or licenses change.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.NamespaceDoc">
            <summary>
            This namespace covers the extensions that Exactive-based instruments have in addition
            to standard instruments. Exactive based systems have support for tunefiles where a bunch of
            optimized instrument values are stored that usually be constant during an acquisition.
            <para>
            You can simply cast an
            <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.IControl"/>
            to an
            <see cref="T:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl"/>
            on an Exactive based instrument.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Methods.IExactiveTableRow">
            <summary>
            This interface describes the extensions to the table row interface by Exactive based instruments.
            </summary>
            <example>
            In the following example "tableRow"
            has to be assigned elsewhere.
            <code>
            ITableRow tableRow;
            IExactiveTableRow exactiveExtensions = tableRow as IExactiveTableRow;
            if (value != null)
            {
            	Console.WriteLine("Exactive extensions available");
            }
            </code>
            </example>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Methods.IExactiveTableRow.SetXmlColumnValue(System.String,System.String)">
            <summary>
            This method assigns a value to a table row. The key can be arbitrary as long as if it
            is understood by the instrument.
            <para>
            For XML data exchange, e.g. with the instrument, XML is used. This is transparent to
            user code. However, under some conditions it is helpful to set values directly.
            </para>
            <para>
            Special licenses are needed to access this method.
            </para>
            </summary>
            <param name="key">name recognizable by the instrument</param>
            <param name="value">value of the name</param>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V1.Control.Methods.IExactiveTableRow.GetXmlColumnValue(System.String,System.String@)">
            <summary>
            This method reads a value from table row. The key can be arbitrary as long as if it
            is understood by the instrument.
            <para>
            For XML data exchange, e.g. with the instrument, XML is used. This is transparent to
            user code. However, under some conditions it is helpful to read values directly.
            </para>
            <para>
            Special licenses are needed to access this interface.
            </para>
            </summary>
            <param name="key">name recognizable by the instrument</param>
            <param name="value">value of that key which can be null. The value is also null if the key is not found.</param>
            <returns>true if the value was found, false otherwise</returns>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.NamespaceDoc">
            <summary>
            This namespace covers the single extension that Exactive-based instruments have in addition
            to standard instruments' value control. Some Set/Readback values nodes allow to perform additional
            actions on Exactive based instruments.
            <para>
            You can simply cast an
            <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.InstrumentValues.IValue"/>
            to an
            <see cref="T:Thermo.Interfaces.ExactiveAccess_V1.Control.InstrumentValues.IExactiveValue"/>
            on an Exactive based instrument.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl">
            <summary>
            This interface describes the extensions to IControl by Exactive based instruments.
            </summary>
            <example>
            In the following example "access"
            has to be assigned elsewhere.
            <code>
            IInstrumentAccess access;
            IControl control = access.Control;
            IExactiveControl exactiveControl = control as IExactiveControl;
            if (exactiveControl == null)
            {
            	Console.WriteLine("Exactive extensions are not available");
            }
            </code>
            </example>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl.InstrumentValues">
            <summary>
            Get access to the instrument values that can be accessed individually.
            The returned instance is helpful for status control and direct value
            manipulation.
            <para>
            A synchroneous change of several scan-related elements should better
            be performed using <see cref="M:Thermo.Interfaces.InstrumentAccess_V1.Control.IControl.GetScans(System.Boolean)"/>.
            </para>
            <para>
            This property is the instrument-specific implementation for Exactive-based instruments.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl.Acquisition">
            <summary>
            Get access to the acquisition interface.
            <para>
            This property is the instrument-specific implementation for Exactive-based instruments.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.IExactiveControl.Tunefile">
            <summary>
            Get access to the tunefile control implementation.
            The returned instance is helpful for managing the current tunefile 
            in the instrument.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionLimitedByCount">
            <summary>
            This special workflow restricts an acquisition to a specific count of scans
            to be taken by the instrument. Scans acquired using the <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.Scans.IScans"/> interface
            are not counted.
            <para>
            The current tune parameters of the instrument will be used.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Control.Acquisition.Workflow.IAcquisitionLimitedByCount.NumberOfScans">
            <summary>
            The number of scans to be taken during this acquisition. The number must
            be positive and must not exceed 1000000.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V1.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V1.NamespaceDoc">
            <summary>
            This namespace covers the single extension that Exactive-based instruments have in addition
            to standard instruments. The user role management allows to determine the current user role as well
            as setting a different role or determine access rights.
            <para>
            You can simply cast an
            <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.IInstrumentAccess"/>
            to an
            <see cref="T:Thermo.Interfaces.ExactiveAccess_V1.IExactiveInstrumentAccess"/>
            on an Exactive based instrument.
            </para>
            </summary>
        </member>
    </members>
</doc>
