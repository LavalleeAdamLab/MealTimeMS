<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESAPI-1.1</name>
    </assembly>
    <members>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V2.Control.IExactiveControl">
            <summary>
            This interface provides access to extensions that allow Thermo application programs
            to deal with Method Editor functionality directly. It is an extension to the
            standard Control interface and is accessible offline.
            </summary>
            <example>
            In the following example "access"
            has to be assigned elsewhere.
            <code>
            IInstrumentAccess access;
            IControl control = access.Control;
            IExactiveControl exactiveControl = control as IExactiveControl;
            if (exactiveControl == null)
            {
            	Console.WriteLine("Exactive method editor extensions are not available");
            }
            </code>
            </example>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.IExactiveControl.LoadMethodEditor(Thermo.Xcalibur.VI_1_0.IStorage)">
            <summary>
            Return an object to perform method editor operations. The interface should be used
            for method-based data acquisition and for method-based information
            access.
            <para>
            </para>
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="source">Parent element of the "data" storage</param>
            <returns>
            The returned instance allows direct manipulation of a method. Method's content can be stored back to an IStorage interface or byte buffers.
            The user is responsible to dispose the object as soon as possible.
            </returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.IExactiveControl.LoadMethodEditor(System.Byte[])">
            <summary>
            Return an object to perform method editor operations. The interface should be used
            for method-based data acquisition and for method-based information
            access.
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="source">content of the "data" storage</param>
            <returns>
            The returned instance allows direct manipulation of a method. Method's content can be stored back to an IStorage interface or byte buffers.
            The user is responsible to dispose the object as soon as possible.
            </returns>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor">
            <summary>
            This interface provides functionality to access the method editor
            elements and to perform some actions on the method editor elements.
            <para>
            No content will be written on disposal, that needs to be done
            previously by use of the Store() methods.
            </para>
            <para>
            This interface is accessible offline.
            </para>
            </summary>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Store(Thermo.Xcalibur.VI_1_0.IStorage,System.String[0:,0:]@)">
            <summary>
            Store the current content of the method to the destination.
            Exceptions will be thrown on error.
            <para>
            Storing of incomplete methods are allowed, but storing of
            invalid methods are not. See properties <see cref="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Warnings"/>
            and <see cref="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Errors"/> to retrieve these information items
            in advance.
            </para>
            <para>
            Calling this method successfully voids the current set of CFR21 records.
            </para>
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="destination">Parent element of the "data" and "text" storage</param>
            <param name="cfr21Records">This will be the set of CFR21 records explaining all changes since loading or the last store operation.</param>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Store(System.Byte[]@,System.Byte[]@,System.String[0:,0:]@)">
            <summary>
            Store the current content of the method to the byte buffers.
            Exceptions will be thrown on error.
            <para>
            Storing of incomplete methods are allowed, but storing of
            invalid methods are not. See properties <see cref="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Warnings"/>
            and <see cref="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Errors"/> to retrieve these information items
            in advance.
            </para>
            <para>
            Calling this method successfully voids the current set of CFR21 records.
            </para>
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="data">new content of the "data" storage</param>
            <param name="text">new content of the "text" storage</param>
            <param name="cfr21Records">This will be the set of CFR21 records explaining all changes since loading or the last store operation.</param>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.LoadTable(System.Type,System.Int32)">
            <summary>
            Get the content of the selected table. Changes in the table will not cause any change
            in the original method editor. A call to <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.StoreTable(Thermo.Interfaces.InstrumentAccess_V1.Control.Methods.ITable,System.Int32)"/> is needed.
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="tableType">Type of the table which has to derive from ITable like IInclusionTable</param>
            <param name="tableIndex">Index of the table starting from 1. Keep this on 1 in case of doubt.</param>
            <returns>null if the table was not found, otherwise the table filled with found items.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.StoreTable(Thermo.Interfaces.InstrumentAccess_V1.Control.Methods.ITable,System.Int32)">
            <summary>
            Replace the table in the method editor by that one in the argument.
            <para>
            This method is accessible offline.
            </para>
            </summary>
            <param name="table">Table which has to derive from ITable like IInclusionTable, the content replaces a table in the method editor.</param>
            <param name="tableIndex">Index of the table starting from 1. Keep this on 1 in case of doubt.</param>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueNames">
            <summary>
            Return all global value names. One can use the methods <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValue(System.String,System.ComponentModel.TypeConverter@)"/> and <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.SetGlobalValue(System.String,System.Object)"/>
            to access individual values.
            </summary>
            <returns>The returned strings represent accessible global properties.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the representation of a global value name exposed to users in a specific locale.
            </summary>
            <param name="name">name returned by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueNames"/></param>
            <param name="culture">culture for which a to return a UI representation of the name</param>
            <returns>The returned string can be used in UIs to present end users a known value name.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValue(System.String,System.ComponentModel.TypeConverter@)">
            <summary>
            Return the content of a global value. The also returned type converter can be used to
            translate the returned object into a human readable string.
            </summary>
            <param name="name">name returned by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueNames"/></param>
            <param name="converter">
            The converter which can be used to translate the returned object into a UI string or which
            can be used to prepare a UI string to be passed back by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.SetGlobalValue(System.String,System.Object)"/>
            </param>
            <returns>The returned object is the value associated with the specified name. null may be a possible value.</returns>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.SetGlobalValue(System.String,System.Object)">
            <summary>
            Set the content of a global value.
            </summary>
            <param name="name">name returned by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueNames"/></param>
            <param name="value">
            New value of the name. The converter returned by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValue(System.String,System.ComponentModel.TypeConverter@)"/> can be used
            for easy manipulation.
            </param>
        </member>
        <member name="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueHelp(System.String,System.Globalization.CultureInfo)">
            <summary>
            Return help for a global value exposed to users in a specific locale. The return value
            may be the empty string.
            </summary>
            <param name="name">name returned by <see cref="M:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.GetGlobalValueNames"/></param>
            <param name="culture">culture for which a to return the help</param>
            <returns>The returned string can be used in UIs to present end users some help about a value. The string may be the empty string.</returns>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Warnings">
            <summary>
            Get access to all warning messages about the method. This includes missing elements.
            <para>
            Calls to the Store methods will be processed if warnings are present. But see also
            <see cref="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Errors"/>.
            </para>
            <para>
            This property is accessible offline.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Errors">
            <summary>
            Get access to all error messages about the method. This typically indicates values
            that are incompatible or external files that are missing.
            <para>
            Calls to the Store methods will throw exceptions if errors are present.
            </para>
            <para>
            This property is accessible offline.
            </para>
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.IMethodEditor.Modified">
            <summary>
            Returns true if the method has been modified.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thermo.Interfaces.ExactiveAccess_V2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V2.Control.NamespaceDoc">
            <summary>
            This namespace covers the extensions that Exactive-based instruments have in version 2 in addition
            to standard instruments. The extensions cover direct method editing functions to be used
            by applications programs.
            <para>
            You can simply cast an
            <see cref="T:Thermo.Interfaces.InstrumentAccess_V1.Control.IControl"/>
            to an
            <see cref="T:Thermo.Interfaces.ExactiveAccess_V2.Control.IExactiveControl"/>
            on an Exactive based instrument.
            </para>
            </summary>
        </member>
        <member name="T:Thermo.Interfaces.ExactiveAccess_V2.Control.Methods.NamespaceDoc">
            <summary>
            This namespace covers parts of the method editor functionality that Exactive-based instruments have in addition
            to standard instruments' methods. Its main purpose is the exchange of tables in methods to be used by
            application programs.
            </summary>
        </member>
    </members>
</doc>
