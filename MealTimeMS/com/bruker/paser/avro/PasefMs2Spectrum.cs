// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace com.bruker.paser.avro
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class PasefMs2Spectrum : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""PasefMs2Spectrum"",""namespace"":""com.bruker.paser.avro"",""fields"":[{""name"":""ms2_id"",""doc"":""monotonically increasing integer id of Ms2 spectra"",""type"":""int""},{""name"":""parent_id"",""doc"":""integer id of the corresponding Ms1 parent frame"",""type"":""int""},{""name"":""rt"",""doc"":""retention time in seconds of the precursor"",""type"":""double""},{""name"":""ooK0"",""doc"":""inverse mobility - 1/K0 - of the precursor"",""type"":""double""},{""name"":""mono_mz"",""doc"":""monoisotopic mass per charge of the precursor"",""type"":""double""},{""name"":""intensity"",""doc"":""monoisotopic mass per charge of the precursor"",""type"":""double""},{""name"":""charge"",""doc"":""integer units of elementary charge of the precursor"",""type"":""int""},{""name"":""mz_data"",""doc"":""binary encoded array of double in little endian order for m/z axis of the Ms2 spectrum"",""type"":""bytes""},{""name"":""intensity_data"",""doc"":""binary encoded array of float in little endian order for intensity axis of the Ms2 spectrum"",""type"":""bytes""}],""version"":""1""}");
		/// <summary>
		/// monotonically increasing integer id of Ms2 spectra
		/// </summary>
		private int _ms2_id;
		/// <summary>
		/// integer id of the corresponding Ms1 parent frame
		/// </summary>
		private int _parent_id;
		/// <summary>
		/// retention time in seconds of the precursor
		/// </summary>
		private double _rt;
		/// <summary>
		/// inverse mobility - 1/K0 - of the precursor
		/// </summary>
		private double _ooK0;
		/// <summary>
		/// monoisotopic mass per charge of the precursor
		/// </summary>
		private double _mono_mz;
		/// <summary>
		/// monoisotopic mass per charge of the precursor
		/// </summary>
		private double _intensity;
		/// <summary>
		/// integer units of elementary charge of the precursor
		/// </summary>
		private int _charge;
		/// <summary>
		/// binary encoded array of double in little endian order for m/z axis of the Ms2 spectrum
		/// </summary>
		private byte[] _mz_data;
		/// <summary>
		/// binary encoded array of float in little endian order for intensity axis of the Ms2 spectrum
		/// </summary>
		private byte[] _intensity_data;
		public virtual Schema Schema
		{
			get
			{
				return PasefMs2Spectrum._SCHEMA;
			}
		}
		/// <summary>
		/// monotonically increasing integer id of Ms2 spectra
		/// </summary>
		public int ms2_id
		{
			get
			{
				return this._ms2_id;
			}
			set
			{
				this._ms2_id = value;
			}
		}
		/// <summary>
		/// integer id of the corresponding Ms1 parent frame
		/// </summary>
		public int parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				this._parent_id = value;
			}
		}
		/// <summary>
		/// retention time in seconds of the precursor
		/// </summary>
		public double rt
		{
			get
			{
				return this._rt;
			}
			set
			{
				this._rt = value;
			}
		}
		/// <summary>
		/// inverse mobility - 1/K0 - of the precursor
		/// </summary>
		public double ooK0
		{
			get
			{
				return this._ooK0;
			}
			set
			{
				this._ooK0 = value;
			}
		}
		/// <summary>
		/// monoisotopic mass per charge of the precursor
		/// </summary>
		public double mono_mz
		{
			get
			{
				return this._mono_mz;
			}
			set
			{
				this._mono_mz = value;
			}
		}
		/// <summary>
		/// monoisotopic mass per charge of the precursor
		/// </summary>
		public double intensity
		{
			get
			{
				return this._intensity;
			}
			set
			{
				this._intensity = value;
			}
		}
		/// <summary>
		/// integer units of elementary charge of the precursor
		/// </summary>
		public int charge
		{
			get
			{
				return this._charge;
			}
			set
			{
				this._charge = value;
			}
		}
		/// <summary>
		/// binary encoded array of double in little endian order for m/z axis of the Ms2 spectrum
		/// </summary>
		public byte[] mz_data
		{
			get
			{
				return this._mz_data;
			}
			set
			{
				this._mz_data = value;
			}
		}
		/// <summary>
		/// binary encoded array of float in little endian order for intensity axis of the Ms2 spectrum
		/// </summary>
		public byte[] intensity_data
		{
			get
			{
				return this._intensity_data;
			}
			set
			{
				this._intensity_data = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.ms2_id;
			case 1: return this.parent_id;
			case 2: return this.rt;
			case 3: return this.ooK0;
			case 4: return this.mono_mz;
			case 5: return this.intensity;
			case 6: return this.charge;
			case 7: return this.mz_data;
			case 8: return this.intensity_data;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.ms2_id = (System.Int32)fieldValue; break;
			case 1: this.parent_id = (System.Int32)fieldValue; break;
			case 2: this.rt = (System.Double)fieldValue; break;
			case 3: this.ooK0 = (System.Double)fieldValue; break;
			case 4: this.mono_mz = (System.Double)fieldValue; break;
			case 5: this.intensity = (System.Double)fieldValue; break;
			case 6: this.charge = (System.Int32)fieldValue; break;
			case 7: this.mz_data = (System.Byte[])fieldValue; break;
			case 8: this.intensity_data = (System.Byte[])fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
