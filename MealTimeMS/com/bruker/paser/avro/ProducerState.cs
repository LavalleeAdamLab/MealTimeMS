// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace com.bruker.paser.avro
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class ProducerState : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""ProducerState"",""namespace"":""com.bruker.paser.avro"",""fields"":[{""name"":""stream_engine_id"",""doc"":""string identifier of the producer/stream-engine, used to identify stream-engines in workflows"",""type"":""string""},{""name"":""control_type"",""doc"":""integer representation of the type of control. Currently just 0 => stop is supported"",""type"":""int""},{""name"":""offset"",""doc"":""current topic offset at the time point of the state transition"",""type"":""int""},{""name"":""partition"",""doc"":""current topic partition"",""type"":""int""}],""version"":""1""}");
		/// <summary>
		/// string identifier of the producer/stream-engine, used to identify stream-engines in workflows
		/// </summary>
		private string _stream_engine_id;
		/// <summary>
		/// integer representation of the type of control. Currently just 0 => stop is supported
		/// </summary>
		private int _control_type;
		/// <summary>
		/// current topic offset at the time point of the state transition
		/// </summary>
		private int _offset;
		/// <summary>
		/// current topic partition
		/// </summary>
		private int _partition;
		public virtual Schema Schema
		{
			get
			{
				return ProducerState._SCHEMA;
			}
		}
		/// <summary>
		/// string identifier of the producer/stream-engine, used to identify stream-engines in workflows
		/// </summary>
		public string stream_engine_id
		{
			get
			{
				return this._stream_engine_id;
			}
			set
			{
				this._stream_engine_id = value;
			}
		}
		/// <summary>
		/// integer representation of the type of control. Currently just 0 => stop is supported
		/// </summary>
		public int control_type
		{
			get
			{
				return this._control_type;
			}
			set
			{
				this._control_type = value;
			}
		}
		/// <summary>
		/// current topic offset at the time point of the state transition
		/// </summary>
		public int offset
		{
			get
			{
				return this._offset;
			}
			set
			{
				this._offset = value;
			}
		}
		/// <summary>
		/// current topic partition
		/// </summary>
		public int partition
		{
			get
			{
				return this._partition;
			}
			set
			{
				this._partition = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.stream_engine_id;
			case 1: return this.control_type;
			case 2: return this.offset;
			case 3: return this.partition;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.stream_engine_id = (System.String)fieldValue; break;
			case 1: this.control_type = (System.Int32)fieldValue; break;
			case 2: this.offset = (System.Int32)fieldValue; break;
			case 3: this.partition = (System.Int32)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
